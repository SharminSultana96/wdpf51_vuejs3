
			Vue Installation
		================================

1. npm init vue@latest
2. cd project2
3. npm install
4. npm run dev
5. http://127.0.0.1:5173



			Documentation
		===========================

1. src->app.vue:
====================
<template>
  <div>
 <h1>Hello {{ name }}</h1>
 <p>Age: {{ age }},  Address: {{ address }}</p>
 <p v-text="address"></p>
 <div>{{ college }}</div>
 <div v-html="college"></div>
 <div v-bind:id="'dynamicId'">{{ address }}</div>
<div v-bind:class="{active: ifActive, error: !ifactive}">{{ address }}</div>
</div>
</template>

<script>
export default{
  data(){
    return {
      name: "Sharmin",
      age : 26,
      address: "Basabo",
      college: '<b>Chandpur Govt. college</b>',
      ifActive: false
    }
  }
}

</script>

<style>
.active{
color: blue;
}

.error{
  color: crimson;
}
#dynamicId{
color: green;
}

</style>


2. src->main.js:
===================
import { createApp } from 'vue'
//import App from './App.vue'
//import App from './App1.vue'
//import App from './reactivity.vue'
//import App from './reactivity2.vue'
//import App from './reactivity3.vue'
//import App from './Computed1.vue'
//import App from './Computed2.vue'
//import App from './StyleBinding1.vue'
//import App from './ConditionRendering.vue'
import App from './For.vue'
// import './assets/main.css'

createApp(App).mount('#app')

3. src->app1.vue:
====================
<template>
  <div>
  <h1 v-if="score>=8">score is {{ score }}, Excellent</h1>
  <h1 v-else-if="score>=6">score is {{ score }}, Good</h1>
  <h1 v-else>Poor</h1>

  <ul v-if="seen">
    <li>Apple</li>
    <li>Orange</li>
    <li>Mango</li>
  </ul>

  <hr>
  {{ ok ? 'Yes' : 'No' }}

</div>
</template>

<script>
export default {
  data(){
    return {
      score:6,
      seen:false,
      ok: false
    }
  }
}
</script>

<style>

</style>

4. src->reactivity.vue:
==========================
<template>
    <div>
  {{ count }}
</div>
</template>

<script>
export default {
    data(){

    return{
        count: 1
    }
},
mounted() {
    console.log(this.count)
    this.count=2
    console.log(this.count)
  }
        
}
</script>

<style>

</style>

5. src->reactivity2.vue:
==========================
<template>
    <div> 
    <h1>{{ count }}</h1>
  <button v-on:click="increment">Click Here</button>
  </div>
 
</template>

<script>
export default {
    data(){
        return{
            count:0
        }
    },

    methods: {
        increment(){
            this.count++
        }
    },
    mounted(){
        this.increment()
        console.log(this.count)
    }
}
</script>

<style>

</style>

6. src->reactivity3.vue:
==========================
<template>
    <div> 
    <h1>{{ obj.nested.count }}</h1>
    <p>{{ obj.arr }}</p>
    <button v-on:click="mutateDeeply">Click Here</button>
  
  </div>
 
</template>

<script>
export default {
  data() {
    return {
      obj: {
        nested: { count: 0 },
        arr: ['foo', 'bar']
      }
    }
  },
  methods: {
    mutateDeeply() {
      // these will work as expected.
      this.obj.nested.count++
      this.obj.arr.push('baz')
    }
  }
}
</script>

<style>

</style>

7. src->Computed1.vue:
==========================
<template>
    <div>
  {{author.books.length > 0 ? 'Yes' : 'No'  }}, {{ totalbooks }} Books

  {{ calculateBooks}}

  {{ now }}
</div>
</template>

<script>
export default {
  data() {
    return {
      author: {
        name: 'John Doe',
        books: [
          'Vue 2 - Advanced Guide',
          'Vue 3 - Basic Guide',
          'Vue 4 - The Mystery'
        ],
      },
    };
  },

  computed: {
    totalbooks(){
        return this.author.books.length;
    },

    now() {
    return Date.now()
  }
  },
  methods: {
  calculateBooksMessage() {
    return this.author.books.length > 0 ? 'Yes' : 'No'
  }
}
}
</script>

<style>

</style>

8. src->Computed2.vue:
==========================
<template>
  <div>
    {{ firstName }} {{ lastName }}
    {{ fullName }}
    <button v-on:click="fullName('Sharmin Sultana')">Click Here</button>
    {{ fullName }}
  </div>
</template>

<script>
export default {
  data() {
    return {
      firstName: 'John',
      lastName: 'Doe'
    }
  },
  computed: {
    fullName: {
      // getter
      get() {
        return this.firstName + ' ' + this.lastName
      },
      // setter
      set(newValue) {
      
        [this.firstName, this.lastName] = newValue.split(' ')
      }
    }
  }
}
</script>

<style>

</style>

9. src->StyleBinding1.vue:
==========================
<template>
    <div>
    <div :class="classObject">Hello</div>
    <button @click="toggleActive">Toggle</button>
</div>
</template>

<script>
export default {
  data() {
    return {
      isActive: true,
      error: null,
    };
  },
  computed: {
    classObject() {
      return {
        active: this.isActive && !this.error,
        "text-danger": this.error && this.error.type === "fatal",
      };
    },
  },
  methods: {
    toggleActive(){
        this.isActive = !this.isActive;
    },
  },
};
</script>

<style>
.active{
    color: green;
}
</style>

10. ConditionRendering.vue:
=============================
<template>
    <div>
  <div v-if="type === 'A'">A</div>
<div v-else-if="type === 'B'">B</div>
<div v-else-if="type === 'C'">C</div>
<div v-else>Not A/B/C</div>
<div v-show="type === 'A'">A with show</div>
</div>
</template>

<script>
export default {
    data(){
        return{
            type: "A",

        }
    }
}
</script>

<style>

</style>

11. For.vue:
================
<template>
    <div>
  <ol>
    <li v-for="(fr, i) in fruits" :key="i"> {{i}} -> {{ fr }}</li>
  </ol>
</div>
</template>

<script>
export default {
    data(){
        return{
            fruits: ["Mango", "Orange", "Apple", "grape"]
        }
    }
}
</script>

<style>

</style>